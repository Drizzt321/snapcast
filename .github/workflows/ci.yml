name: CI

on:
  push:
    branches:
      - develop
      - master
  pull_request:

env:
  BOOST_VERSION: 1_79_0

jobs:
  linux:

    strategy:
      fail-fast: false
      matrix:
        compiler: 
          - clang-10
          - clang-11
          - clang-12
          - gcc-9
          - gcc-10
        include:
          - compiler: clang-10
            cc: clang-10
            cxx: clang++-10
          - compiler: clang-11
            cc: clang-11
            cxx: clang++-11
          - compiler: clang-12
            cc: clang-12
            cxx: clang++-12
          - compiler: gcc-9
            cc: gcc-9
            cxx: g++-9
          - compiler: gcc-10
            cc: gcc-10
            cxx: g++-10

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: dependencies
      run: sudo apt-get update && sudo apt-get install -yq rename libasound2-dev libsoxr-dev libvorbisidec-dev libvorbis-dev libflac-dev libopus-dev alsa-utils libpulse-dev libavahi-client-dev avahi-daemon debhelper ccache expat
    - name: cache boost
      id: cache-boost
      uses: actions/cache@v2
      with:
        path: boost_${{ env.BOOST_VERSION }}
        key: ${{ runner.os }}-boost
    - name: get boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        wget https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION//_/.}/source/boost_${BOOST_VERSION}.tar.bz2
        tar xjf boost_${BOOST_VERSION}.tar.bz2
    - name: cache ccache
      id: cache-ccache
      uses: actions/cache@v2
      with:
        path: /home/runner/.ccache
        key: ${{ runner.os }}-${{ matrix.compiler }}-ccache-${{ github.sha }}
        restore-keys: ${{ runner.os }}-${{ matrix.compiler }}-ccache-
    #- name: ccache dump config
    #  run: ccache -p
    - name: cmake
      run: |
        cmake -S . -B build \
          -DWERROR=ON -DBUILD_TESTS=ON \
          -DBOOST_ROOT=boost_${BOOST_VERSION} \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_FLAGS="-DCMAKE_CXX_FLAGS=-DJSON_HAS_CPP_14"
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
    - name: build
      run: cmake --build build --parallel 3


  macos:

    strategy:
      fail-fast: false
      matrix:
        xcode: ['11.7', '12.5.1', '13.2.1']

    runs-on: macos-11

    steps:
    - uses: actions/checkout@v2
    - name: dependencies
      run: brew install pkgconfig libsoxr ccache expat
    - name: cache boost
      id: cache-boost
      uses: actions/cache@v2
      with:
        path: boost_${{ env.BOOST_VERSION }}
        key: ${{ runner.os }}-boost
    - name: get boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        wget https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION//_/.}/source/boost_${BOOST_VERSION}.tar.bz2
        tar xjf boost_${BOOST_VERSION}.tar.bz2
    - name: cache ccache
      id: cache-ccache
      uses: actions/cache@v2
      with:
        path: /Users/runner/Library/Caches/ccache
        key: ${{ runner.os }}-${{ matrix.xcode }}-ccache-${{ github.sha }}
        restore-keys: ${{ runner.os }}-${{ matrix.xcode }}-ccache-
    - name: cmake
      run: |
        cmake -S . -B build \
          -DWERROR=ON -DBUILD_TESTS=ON \
          -DBOOST_ROOT=boost_${BOOST_VERSION} \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_FLAGS="-I/usr/local/include -DCMAKE_CXX_FLAGS=-DJSON_HAS_CPP_14 -Wno-deprecated-declarations"
      env:
        DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
    - name: build
      run: cmake --build build --parallel 3 --verbose

  windows:

    strategy:
      fail-fast: false
      matrix:
        os: 
          - windows-2019
          - windows-2022
        include:
          - os: windows-2019
            vs: "Visual Studio 16 2019"
          - os: windows-2022
            vs: "Visual Studio 17 2022"

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: cache dependencies
      id: cache-dependencies
      uses: actions/cache@v2
      with:
        #path: ${VCPKG_INSTALLATION_ROOT}\installed
        path: c:\vcpkg\installed
        key: ${{ runner.os }}-dependencies
    - name: dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: vcpkg.exe install libflac libvorbis soxr opus boost-asio --triplet x64-windows
    - name: cmake
      run: |
        echo vcpkg installation root: ${env:VCPKG_INSTALLATION_ROOT}
        cmake -S . -B build -G "${{ matrix.vs }}" `
          -DWERROR=ON -DBUILD_TESTS=ON `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DVCPKG_TARGET_TRIPLET="x64-windows" `
          -DCMAKE_BUILD_TYPE=Release `
          -DREVISION="${{ github.sha }}"
    - name: build
      run: cmake --build build --config Release --parallel 3 --verbose
